package pt.utl.ist.dataProvider;import org.apache.log4j.Logger;import org.dom4j.DocumentException;import org.dom4j.DocumentHelper;import org.dom4j.Element;import pt.utl.ist.configuration.ConfigSingleton;import java.io.IOException;import java.net.URL;import java.util.ArrayList;import java.util.List;/** * Created by IntelliJ IDEA. * User: Emanuel * Date: 11/Abr/2010 * Time: 11:53:20 */public class Aggregator {    private static final Logger log = Logger.getLogger(Aggregator.class);    private String id;    private String name;    private String nameCode;    private URL homePage;    private List<DefaultDataProvider> dataProviders = new ArrayList<DefaultDataProvider>();    /**     * Get the Identifier of the Aggregator. The Identifier value is generated by the server side application. If     * an error occurs on the server side (e.g. "Aggregator Already Exists"), the default value (-1L) is returned.     *     * @return - Long     */    public String getId() {        return id;    }    /**     * Set the Identifier of the Aggregator. This method is used by the Server side application. A value set by the     * client side application is ignored.     *     * @param id - Long     */    public void setId(String id) {        this.id = id;    }    /**     * Get the Name of the Aggregator     *     * @return - String     */    public String getName() {        return name;    }    /**     * Set the Name of the Aggregator     *     * @param name - String     */    public void setName(String name) {        this.name = name;    }    /**     * Get the code associated to the Aggregator. The NameCode is used by the server side application     * to generate a unique file identifier for harversted metadata.     *     * @return - String     */    public String getNameCode() {        return nameCode;    }    /**     * Set the code associated to the Aggregator. The NameCode is used by the server side application     * to generate a unique file identifier for harversted metadata.     *     * @return - String     */    public void setNameCode(String nameCode) {        this.nameCode = nameCode;    }    /**     * Get the URL of the Aggregator's Home Page     *     * @return URL     */    public URL getHomePage() {        return homePage;    }    /**     * Set the URL of the Aggregator's Home Page     *     * @param homePage - URL     */    public void setHomePage(URL homePage) {        this.homePage = homePage;    }    /**     * Get the List of Providers belonging to this Aggregator instance.     *     * @return -  List<DataProvider>     * @see {@link DataProvider}     */    public List<DefaultDataProvider> getDataProviders() {        return dataProviders;    }    /**     * Set the List of Providers belonging to this Aggregator instance.     *     * @param dataProviders - List<DataProvider>     * @see {@link DataProvider}     */    public void setDataProviders(List<DefaultDataProvider> dataProviders)  {        this.dataProviders.addAll(dataProviders);    }    /**     * Add a Data Provider     *     * @param dataProvider - DataProvider     * @see {@link DataProvider}     */    public void addDataProvider(DefaultDataProvider dataProvider)  {        dataProviders.add(dataProvider);    }    /**     * Generate an Id for Aggregator     * @param name     * @return     * @throws DocumentException     * @throws IOException     */    public static String generateId(String name) throws DocumentException, IOException {        String generatedIdPrefix = "";        for (int i = 0; (i < name.length() && i < 32); i++) {            if((name.charAt(i) >= 'a' && name.charAt(i) <= 'z')                    || (name.charAt(i) >= 'A' && name.charAt(i) <= 'Z')) {                generatedIdPrefix += name.charAt(i);            }        }        generatedIdPrefix += "r";        return generatedIdPrefix + generateNumberSufix(generatedIdPrefix);    }    private static int generateNumberSufix(String basename) throws DocumentException, IOException {        int currentNumber = 0;        String currentFullId = basename + currentNumber;        while(((DefaultDataManager)ConfigSingleton.getRepoxContextUtil().getRepoxManager().getDataManager()).getAggregator(currentFullId) != null) {            currentNumber++;            currentFullId = basename + currentNumber;        }        return currentNumber;    }    public Aggregator() {    }    public Aggregator(String id, String name, String nameCode, URL homePage, List<DefaultDataProvider> dataProviders) {        this.id = id;        this.name = name;        this.nameCode = nameCode;        this.homePage = homePage;        this.dataProviders = dataProviders;    }    /**     * Create Element from aggregator information     * @param writeDataProviders      * @return Document     */    public Element createElement(boolean writeDataProviders){        Element aggregatorNode = DocumentHelper.createElement("aggregator");        aggregatorNode.addAttribute("id", this.getId());        aggregatorNode.addElement("name").setText(this.getName());        if(this.getNameCode() != null) {            aggregatorNode.addElement("nameCode").setText(this.getNameCode());        }        if(this.getHomePage() != null) {            aggregatorNode.addElement("url").setText(this.getHomePage().toString());        }        if(writeDataProviders && this.getDataProviders() != null){            for (DefaultDataProvider dataProvider : this.getDataProviders()) {                aggregatorNode.add(dataProvider.createElement(true));            }        }        return aggregatorNode;    }}